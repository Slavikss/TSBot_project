import asyncio
import logging
import os
import shutil
from pathlib import Path
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, \
    InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from dotenv import load_dotenv
from processing import style_processing_cyclegan, sr_processing, style_dict, neural_transfer

# Load bot token from venv
load_dotenv('venv/token.env')

os.chdir('./')

MAX_WIDTH_SR_INPUT = 1280
MAX_HEIGHT_SR_INPUT = 720

# logging config
logging.basicConfig(filename='logs',
                    filemode='a',
                    format='%(asctime)s,%(msecs)d %(name)s %(levelname)s %(message)s',
                    datefmt='%H:%M:%S',
                    level=logging.INFO)

logging.info("bot logging")

logger = logging.getLogger()

# Initialize bot
bot = Bot(token=os.getenv('TOKEN'), parse_mode='HTML')
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# Set dict of style names of bot
style_names = {'s2w': 'Summer‚áÑwinter(Mountain view)', 'p2m': 'Photo‚áÑMonet(—Å—Ç–∏–ª—å –ö–ª–æ–¥–∞ –ú–æ–Ω–µ)',
               'p2c': 'Photo‚áÑCezanne(—Å—Ç–∏–ª—å –ü–æ–ª—è –°–µ–∑–∞–Ω–Ω–∞)', 'p2u': 'Photo‚áÑUkiyoe(—Å—Ç–∏–ª—å –∏–∑–æ–±—Ä. –∏—Å–∫—É—Å—Å—Ç–≤–∞ –Ø–ø–æ–Ω–∏–∏)',
               'p2v': 'Photo‚áÑVangogh(—Å—Ç–∏–ª—å –í–∏–Ω—Å–µ–Ω—Ç–∞ –í–∞–Ω –ì–æ–≥–∞)', 'sr': '–ü–æ–≤—ã—à–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
               'nt': '–°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç–∏–ª—è'}

# Set buttons, Keyboard markup
b1 = KeyboardButton('/–í—ã–±—Ä–∞—Ç—å_–∫–∞—Ç–µ–≥–æ—Ä–∏—é')
b2 = KeyboardButton('/–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å_–≤_—ç—Ç–æ–º_—Å—Ç–∏–ª–µ')
kb_client = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
kb_client.add(b1)

kb = InlineKeyboardMarkup(row_width=1, one_time_keyboard=True)
kb1 = InlineKeyboardButton(text=style_names['s2w'], callback_data='s2w')
kb2 = InlineKeyboardButton(text=style_names['p2m'], callback_data='p2m')
kb3 = InlineKeyboardButton(text=style_names['p2c'], callback_data='p2c')
kb4 = InlineKeyboardButton(text=style_names['p2u'], callback_data='p2u')
kb5 = InlineKeyboardButton(text=style_names['p2v'], callback_data='p2v')
kb6 = InlineKeyboardButton(text='–°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç–∏–ª—è', callback_data='nt')
kb7 = InlineKeyboardButton(text='–ü–æ–≤—ã—à–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', callback_data='sr')

kb.add(kb1, kb2, kb3, kb4, kb5, kb6, kb7)


# Initialize bot states
class BotStates(StatesGroup):
    class NTState(StatesGroup):
        style = State()
        content = State()

    wait = State()
    SRGANState = State()
    CYCLEGANState = State()


'''' Start handlers '''


# Handler to not upload image while current is processing
@dp.message_handler(commands=['start', 'help', '–í—ã–±—Ä–∞—Ç—å_–∫–∞—Ç–µ–≥–æ—Ä–∏—é'], state=BotStates.wait)
async def on_message(message: types.Message):
    await bot.send_message(message.from_user.id, '<strong>–û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –º–æ–∂–µ–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å '
                                                 '—Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.</strong>')


# Start/help handler
@dp.message_handler(commands=['start', 'help'], state='*')
async def on_message(message: types.Message):
    await bot.send_message(message.from_user.id,
                           f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø-TSBot, —É–º–µ—é —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∏–ª—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤ '
                           f'–æ–¥–∏–Ω –∏–∑ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å—Ç–∏–ª–µ–π –∏ –ø–æ–≤—ã—à–∞—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.üñºÔ∏è\n\n '
                           '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∞–º–∏, –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "<b>–í—ã–±—Ä–∞—Ç—å_–∫–∞—Ç–µ–≥–æ—Ä–∏—é</b>".',
                           reply_markup=kb_client)


# Choose one category of bot's functional
@dp.message_handler(commands=['–í—ã–±—Ä–∞—Ç—å_–∫–∞—Ç–µ–≥–æ—Ä–∏—é'], state='*')
async def handle_docs_photo(message, state: FSMContext):
    await state.finish()
    await bot.send_message(message.from_user.id,
                           '<i><b>–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.üî†</b></i>',
                           reply_markup=kb)


# Catch callback from previous handler
@dp.callback_query_handler()
async def style_choose_handler(query: types.CallbackQuery):
    global cur_style_set
    cur_style_set = query.data
    await bot.delete_message(chat_id=query.from_user.id, message_id=query.message.message_id)
    await query.message.answer(f'–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è <i><b>"{style_names[cur_style_set]}".</b></i>\n–¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ '
                               f'–∫–∞—Ä—Ç–∏–Ω–∫—É/—Ñ–æ—Ç–æ, —Å—Ç–∏–ª—å –∫–æ—Ç–æ—Ä–æ–π(-–≥–æ) —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å.\n\n '
                               '<i><b>‚ö†–ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã!‚ö†</b></i>\n –ë–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ(–¥–ª—è '
                               f'–ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç–∏–ª—è) –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ {MAX_WIDTH_SR_INPUT}*{MAX_HEIGHT_SR_INPUT} '
                               f'–Ω–∞ –≤—Ö–æ–¥–µ (–¥–ª—è —Ä–µ–∂–∏–º–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)')

    # Choose state of one bot's styles
    if cur_style_set == 'nt':
        await query.message.answer('1Ô∏è‚É£–®–∞–≥ 1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏e, <i><b>—Å—Ç–∏–ª—å –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å—Å—è.</b></i>')
        await BotStates.NTState.style.set()

    elif cur_style_set == 'sr':
        await BotStates.SRGANState.set()

    else:
        await BotStates.CYCLEGANState.set()


'''SRGAN processing handler'''


# Download and process image with SRGAN
@dp.message_handler(state=BotStates.SRGANState, content_types=['photo'])
async def download_process_SRGAN(message):
    photo_name = f'{message.from_user.id}_{cur_style_set}'

    # Check if image is not bigger than MAX_HEIGHT_SR_INPUT * MAX_WIDTH_SR_INPUT else send error message
    if message.photo[-1]['width'] * message.photo[-1]['height'] <= MAX_HEIGHT_SR_INPUT * MAX_WIDTH_SR_INPUT:

        # Download photo
        await message.photo[-1].download(
            destination_file=Path(f'ESRGAN/LR/{photo_name}.jpg'))
        await bot.send_message(message.from_user.id,
                               '‚åõ–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...‚åõ',
                               reply_markup=ReplyKeyboardRemove())

        # Set wait state to not upload other images while current is processing
        await BotStates.wait.set()

        # Process the image
        output_path = await asyncio.get_running_loop().run_in_executor(None, sr_processing, photo_name)

        # Go to main state of this handler
        await BotStates.SRGANState.set()

        # Send processed image
        await bot.send_photo(chat_id=message.from_user.id, photo=open(output_path, 'rb'),
                             caption=f'‚úÖP–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–≤—ã—à–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', )
        print('SRGAN:Done...')
        await bot.send_message(chat_id=message.from_user.id,
                               text=f'–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å <b><i>–≤ —ç—Ç–æ–º —Å—Ç–∏–ª–µ</i></b>, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\
                                \n\n–ß—Ç–æ–±—ã <b><i>—Å–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å</i></b>, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '
                                    f'<b><i>"/–í—ã–±—Ä–∞—Ç—å_–∫–∞—Ç–µ–≥–æ—Ä–∏—é".</i></b>',
                               reply_markup=kb_client)

        # Delete downloaded and processed images
        try:
            os.remove(f'ESRGAN/LR/{photo_name}.jpg')
        except OSError as e:
            print("Error: %s - %s." % (e.filename, e.strerror))

        try:
            os.remove(f'ESRGAN/results/{photo_name}_rlt.png')
        except OSError as e:
            print("Error: %s - %s." % (e.filename, e.strerror))

    else:
        await bot.send_message(message.from_user.id,
                               f"<strong>‚ö†–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —Å —Ä–∞–∑—Ä–µ—àe–Ω–∏–µ–º –Ω–µ –≤—ã—à–µ "
                               f"{MAX_WIDTH_SR_INPUT}*{MAX_HEIGHT_SR_INPUT}‚ö†</strong>")


'''CycleGAN processing handler'''


# Download and process image with CycleGAN
@dp.message_handler(state=BotStates.CYCLEGANState, content_types=['photo'])
async def download_process_CYCLEGAN(message):
    photo_name = f'{message.from_user.id}_{cur_style_set}'

    # Get name of chosen style
    kb_name = style_names[cur_style_set]

    # Download photo
    await message.photo[-1].download(
        destination_file=Path(f'photos/{photo_name}.jpg'))
    await bot.send_message(message.from_user.id,
                           '‚åõ–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...‚åõ', reply_markup=ReplyKeyboardRemove())

    # Set wait state to not upload other images while current is processing
    await BotStates.wait.set()

    # Process the image
    output_path = await asyncio.get_running_loop().run_in_executor(None, style_processing_cyclegan, photo_name)

    # Go to main state of this handler
    await BotStates.CYCLEGANState.set()

    # Send photo
    await bot.send_photo(chat_id=message.from_user.id, photo=open(output_path, 'rb'),
                         caption=f'‚úÖP–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç–∏–ª—è {kb_name}')
    print('CycleGAN:Done...')
    await bot.send_message(chat_id=message.from_user.id,
                           text=f'–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å <b><i>–≤ —ç—Ç–æ–º —Å—Ç–∏–ª–µ</i></b>, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\
                                \n\n–ß—Ç–æ–±—ã <b><i>—Å–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å</i></b>, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '
                                f'<b><i>"/–í—ã–±—Ä–∞—Ç—å_–∫–∞—Ç–µ–≥–æ—Ä–∏—é".</i></b>',
                           reply_markup=kb_client)

    # Delete downloaded and processed images
    try:
        os.remove(f'photos/{photo_name}.jpg')
    except OSError as e:
        print("Error: %s - %s." % (e.filename, e.strerror))

    try:
        shutil.rmtree(f'photos/{style_dict[cur_style_set]}')
    except OSError as e:
        print("Error: %s - %s." % (e.filename, e.strerror))


''' Neural Transfer process handlers '''


# Download and process image with slow algorithm
@dp.message_handler(state=BotStates.NTState.style, content_types='photo')
async def download_style_photo(message):
    # Download style image
    await message.photo[-1].download(
        destination_file=Path(f'Neural_transfer/{message.from_user.id}_style.jpg'))
    await bot.send_message(message.from_user.id,
                           f'2Ô∏è‚É£–®–∞–≥ 2.–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏e <i><b>–Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å—Å—è —Å—Ç–∏–ª—å.</b></i>')

    # Set state for download and process content image
    await BotStates.NTState.next()


@dp.message_handler(state=BotStates.NTState.content, content_types='photo')
async def download_content_process_photo(message):
    # Download content image
    await message.photo[-1].download(
        destination_file=Path(f'Neural_transfer/{message.from_user.id}_content.jpg'))

    await bot.send_message(message.from_user.id,
                           '‚åõ–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...‚åõ', reply_markup=ReplyKeyboardRemove())

    # Set wait state to not upload other images while current is processing
    await BotStates.wait.set()

    # Process the images
    output_path = await asyncio.get_running_loop().run_in_executor(None, neural_transfer, message.from_user.id)

    # Go to main state of this handler
    await BotStates.NTState.content.set()

    await bot.send_photo(chat_id=message.from_user.id, photo=open(output_path, 'rb'),
                         caption=f'‚úÖP–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è', )
    print('NT:Done...')
    await bot.send_message(chat_id=message.from_user.id,
                           text=f'–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å <b><i>–≤ —ç—Ç–æ–º —Å—Ç–∏–ª–µ</i></b>, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\
                                \n\n–ß—Ç–æ–±—ã <b><i>—Å–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å</i></b>, '
                                f'–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b><i>"/–í—ã–±—Ä–∞—Ç—å_–∫–∞—Ç–µ–≥–æ—Ä–∏—é".</i></b>',
                           reply_markup=kb_client)

    # Delete downloaded and processed images
    for path_to_remove in [f'Neural_transfer/{message.from_user.id}_style.jpg',
                           f'Neural_transfer/{message.from_user.id}_content.jpg', output_path]:
        try:
            os.remove(path_to_remove)
        except OSError as e:
            print("Error: %s - %s." % (e.filename, e.strerror))


''' Wrong file/command exception handlers '''


# Handler if user send photo as document. This need to avoid cases
# where file is too large and local server can drop while processing.
@dp.message_handler(content_types=['document'], state='*')
async def doc_handler(message: types.Message):
    await bot.send_message(message.from_user.id,
                           'üòï–ï—Å–ª–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º.</strong>')


# Handler if user sent invalid commands or random words
@dp.message_handler(state='*')
async def cmd_not_found_handler(message: types.Message):
    await bot.send_message(message.from_user.id,
                           'üòï–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞e—Ç—Å—è –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.')


# Handler if bot is just started and user wants to upload photo in no category.
@dp.message_handler(content_types=['photo'], state='*')
async def cat_not_found_handler(message: types.Message):
    await bot.send_message(message.from_user.id,
                           '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.\nH–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <i><b>"/–í—ã–±—Ä–∞—Ç—å_–∫–∞—Ç–µ–≥–æ—Ä–∏—é".</b></i>')


if __name__ == '__main__':
    print('Bot is working...')
    executor.start_polling(dp, skip_updates=True)
